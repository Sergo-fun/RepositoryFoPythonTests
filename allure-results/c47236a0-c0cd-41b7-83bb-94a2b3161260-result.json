{"name": "Создание пользователя с корректными данными", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.ValidationError: 'id' is a required property\n\nFailed validating 'required' in schema:\n    {'type': 'object',\n     'properties': {'name': {'type': 'string'},\n                    'job': {'type': 'string'},\n                    'id': {'type': 'string'},\n                    'createdAt': {'type': 'string', 'format': 'date-time'}},\n     'required': ['id', 'createdAt']}\n\nOn instance:\n    {'name': 'morpheus',\n     'job': 'leader',\n     'updatedAt': '2025-01-28T20:30:55.348Z'}", "trace": "@allure.suite(\"PUT User API\")\n    @allure.title(\"Создание пользователя с корректными данными\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_create_user():\n        body = {\n            \"name\": \"morpheus\",\n            \"job\": \"leader\"\n        }\n        with allure.step(\"Отправить PUT-запрос для обновления данных пользователя\"):\n            response = httpx.put(BASE_URL + UPDATE_USER, json=body)\n    \n        with allure.step(\"Проверить статус-код ответа\"):\n            assert response.status_code == 200\n    \n        with allure.step(\"Проверить схему JSON-ответа и данные\"):\n            response_json = response.json()\n            creation_date = response_json['updatedAt'].replace('T', ' ')\n            current_date = str(datetime.datetime.utcnow())\n    \n>           validate(response_json, CREATE_USER_SCHEME)\n\ntests\\test_put_user_data.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ninstance = {'job': 'leader', 'name': 'morpheus', 'updatedAt': '2025-01-28T20:30:55.348Z'}\nschema = {'properties': {'createdAt': {'format': 'date-time', 'type': 'string'}, 'id': {'type': 'string'}, 'job': {'type': 'string'}, 'name': {'type': 'string'}}, 'required': ['id', 'createdAt'], 'type': 'object'}\ncls = <class 'jsonschema.validators.Draft202012Validator'>, args = ()\nkwargs = {}\nvalidator = Draft202012Validator(schema={'properties': {'createdAt': {'format': 'date-time', 'type': 'string'}, 'id': {'type': 'st...type': 'string'}, 'name': {'type': 'string'}}, 'required': ['id', 'createdAt'], 'type': 'object'}, format_checker=None)\nerror = <ValidationError: \"'id' is a required property\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft202012Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n    \n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 'id' is a required property\nE           \nE           Failed validating 'required' in schema:\nE               {'type': 'object',\nE                'properties': {'name': {'type': 'string'},\nE                               'job': {'type': 'string'},\nE                               'id': {'type': 'string'},\nE                               'createdAt': {'type': 'string', 'format': 'date-time'}},\nE                'required': ['id', 'createdAt']}\nE           \nE           On instance:\nE               {'name': 'morpheus',\nE                'job': 'leader',\nE                'updatedAt': '2025-01-28T20:30:55.348Z'}\n\n.venv\\Lib\\site-packages\\jsonschema\\validators.py:1332: ValidationError"}, "steps": [{"name": "Отправить PUT-запрос для обновления данных пользователя", "status": "passed", "start": 1738096125228, "stop": 1738096125944}, {"name": "Проверить статус-код ответа", "status": "passed", "start": 1738096125944, "stop": 1738096125944}, {"name": "Проверить схему JSON-ответа и данные", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.ValidationError: 'id' is a required property\n\nFailed validating 'required' in schema:\n    {'type': 'object',\n     'properties': {'name': {'type': 'string'},\n                    'job': {'type': 'string'},\n                    'id': {'type': 'string'},\n                    'createdAt': {'type': 'string', 'format': 'date-time'}},\n     'required': ['id', 'createdAt']}\n\nOn instance:\n    {'name': 'morpheus',\n     'job': 'leader',\n     'updatedAt': '2025-01-28T20:30:55.348Z'}\n", "trace": "  File \"D:\\Python\\tests\\test_put_user_data.py\", line 29, in test_create_user\n    validate(response_json, CREATE_USER_SCHEME)\n    ~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Python\\.venv\\Lib\\site-packages\\jsonschema\\validators.py\", line 1332, in validate\n    raise error\n"}, "start": 1738096125944, "stop": 1738096125948}], "start": 1738096125228, "stop": 1738096125961, "uuid": "38aa2b4b-cdcc-49d5-97cd-9e089b0f904c", "historyId": "3a910f1972e7f3789f7442188f5076aa", "testCaseId": "3a910f1972e7f3789f7442188f5076aa", "fullName": "tests.test_put_user_data#test_create_user", "labels": [{"name": "suite", "value": "PUT User API"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "tests"}, {"name": "host", "value": "LAPTOP-LSAVBAAG"}, {"name": "thread", "value": "14248-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_put_user_data"}]}